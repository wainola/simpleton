{"version":3,"file":"static/webpack/static/development/pages/index.js.13b077e35713146c4a27.hot-update.js","sources":["webpack:///./pages/components/Contact.jsx"],"sourcesContent":["import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Grid, FormControl, TextField, Button } from '@material-ui/core';\nimport validations from '../../Services/validators';\nimport Api from '../Api';\n\nimport LoadComplete from './LoadComplete';\nimport ResponsiveDialog from './Dialog';\n\nconst styles = theme => ({\n  paper: {\n    textAlign: 'center',\n    height: '100%'\n  },\n  formFields: {\n    margin: '10px',\n    width: '75%'\n  },\n  formContainer: {\n    display: 'flex',\n    'flex-direction': 'column',\n    'justify-content': 'center',\n    'align-items': 'center'\n  },\n  inlineFields: {\n    display: 'flex',\n    'flex-direction': 'row',\n    'align-items': 'flex-end'\n  }\n});\n\nfunction Contact(props) {\n  const [formChecked, setFormChecked] = React.useState({\n    nombre: false,\n    apellido: false,\n    email: false,\n    telefono: false,\n    razon: false,\n    direccion: false\n  });\n  const [formValues, setFormValues] = React.useState({\n    nombre: '',\n    apellido: '',\n    email: '',\n    telefono: '',\n    razon: '',\n    direccion: ''\n  });\n  const [allChecked, setAllChecked] = React.useState(false);\n  const [isComplete, setComplete] = React.useState(false);\n  const [nodeForm, setNodeForm] = React.useState(null);\n  const [open, setOpen] = React.useState(false);\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleOpen() {\n    console.log('openDialog');\n    setOpen(true);\n  }\n\n  function handleBlur(evt) {\n    if (evt.target.value !== '') {\n      setFormChecked({\n        ...formChecked,\n        [evt.target.name]: !formChecked[evt.target.name]\n      });\n    }\n  }\n\n  function handleFocus(evt) {\n    // console.log(':::', evt.target.value);\n    if (evt.target.value !== '') {\n      setFormChecked({\n        ...formChecked,\n        [evt.target.name]: !formChecked[evt.target.name]\n      });\n    }\n  }\n\n  function handleChange(evt) {\n    evt.preventDefault();\n    if (evt.target.name === 'direccion' && formChecked[evt.target.name]) {\n      setAllChecked(!allChecked);\n    }\n    setFormValues({\n      ...formValues,\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    console.log('formValues', formValues);\n    console.log(\n      'validations',\n      validations(formValues),\n      validations(formValues).every(item => !!item.isValid)\n    );\n\n    const validData = validations(formValues);\n    const areAllValid = validData.every(item => !!item.isValid);\n\n    if (areAllValid) {\n      console.log('areValid', areAllValid, validData);\n      Api.sendClientData(formValues).then(response => {\n        if (response.status === 200) {\n          handleOpen();\n          nodeForm.reset();\n          setFormChecked({\n            nombre: false,\n            apellido: false,\n            email: false,\n            telefono: false,\n            razon: false,\n            direccion: false\n          });\n        }\n      });\n    }\n  }\n\n  function getNode(node) {\n    setNodeForm(node);\n  }\n\n  const { classes } = props;\n\n  return (\n    <div>\n      <Grid container>\n        <Grid item xs={12} sm={12} md={12} lg={12} className={classes.formContainer}>\n          <form onSubmit={handleSubmit} name=\"contact-form\" ref={getNode}>\n            <FormControl className={classes.formFields}>\n              <div className={classes.inlineFields}>\n                <LoadComplete isComplete={formChecked.nombre} name=\"nombre\" />\n                <TextField\n                  id=\"input-with-icon-textfield\"\n                  label=\"Nombre\"\n                  onBlur={!formChecked.nombre ? handleBlur : () => {}}\n                  onFocus={handleFocus}\n                  name=\"nombre\"\n                  onChange={handleChange}\n                />\n              </div>\n            </FormControl>\n            <FormControl className={classes.formFields}>\n              <div className={classes.inlineFields}>\n                <LoadComplete isComplete={formChecked.apellido} name=\"apellido\" />\n                <TextField\n                  id=\"input-with-icon-textfield\"\n                  label=\"Apellido\"\n                  name=\"apellido\"\n                  onBlur={!formChecked.apellido ? handleBlur : () => {}}\n                  onFocus={handleFocus}\n                  onChange={handleChange}\n                />\n              </div>\n            </FormControl>\n            <FormControl className={classes.formFields}>\n              <div className={classes.inlineFields}>\n                <LoadComplete isComplete={formChecked.email} name=\"email\" />\n                <TextField\n                  id=\"input-with-icon-textfield\"\n                  label=\"Email\"\n                  name=\"email\"\n                  onBlur={!formChecked.email ? handleBlur : () => {}}\n                  onFocus={handleFocus}\n                  onChange={handleChange}\n                />\n              </div>\n            </FormControl>\n            <FormControl className={classes.formFields}>\n              <div className={classes.inlineFields}>\n                <LoadComplete isComplete={formChecked.telefono} name=\"telefono\" />\n                <TextField\n                  id=\"input-with-icon-textfield\"\n                  label=\"Teléfono\"\n                  name=\"telefono\"\n                  onBlur={!formChecked.telefono ? handleBlur : () => {}}\n                  onFocus={handleFocus}\n                  onChange={handleChange}\n                />\n              </div>\n            </FormControl>\n            <FormControl className={classes.formFields}>\n              <div className={classes.inlineFields}>\n                <LoadComplete isComplete={formChecked.razon} name=\"razon\" />\n                <TextField\n                  id=\"input-with-icon-textfield\"\n                  label=\"Motivo de consulta\"\n                  name=\"razon\"\n                  onBlur={!formChecked.razon ? handleBlur : () => {}}\n                  onFocus={handleFocus}\n                  onChange={handleChange}\n                />\n              </div>\n            </FormControl>\n            <FormControl className={classes.formFields}>\n              <div className={classes.inlineFields}>\n                <LoadComplete isComplete={formChecked.direccion} name=\"direccion\" />\n                <TextField\n                  id=\"input-with-icon-textfield\"\n                  label=\"Dirección\"\n                  name=\"direccion\"\n                  onBlur={!formChecked.direccion ? handleBlur : () => {}}\n                  onFocus={handleFocus}\n                  onChange={handleChange}\n                />\n              </div>\n            </FormControl>\n            <FormControl className={classes.formFields}>\n              <Button color=\"primary\" type=\"submit\">\n                Guardar\n              </Button>\n            </FormControl>\n            <ResponsiveDialog open={open} handleClose={handleClose} />\n          </form>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(Contact);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAfA;AAAA;AACA;AAqBA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AACA;AADA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AATA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/FA;AAksourceRoot":""}